# -*- coding: utf-8 -*-
"""강은규_3-2_빅데이터처리_프로젝트.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BWjtZACuXY5xDTODYCezFCjXrbpEg1JP

본 프로젝트는 지역별, 시간대별 범죄 유형의 차이점을 찾기 위한 프로젝트이다.

특정 지역이 어떤 범죄에 취약한지 시각화를 통해 알아내며 보완할 점을 알아내는것을 목표로 한다.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_timeSeries = pd.read_csv("/content/경찰청_범죄 발생 시간대 및 요일_20191231.csv",encoding="cp949")#인코딩 방식 지정
df_timeSeries.head()

df_timeSeries.info()

df_loc = pd.read_csv("/content/경찰청_범죄 발생 지역별 통계_20221231.csv",encoding="cp949")
df_loc.head()

df_loc.info()

merged_df = pd.merge(df_timeSeries, df_loc, on=['범죄대분류', '범죄중분류'], how='inner')
merged_df.head()

# 시간대와 지역 열 리스트
time_columns = [
    '0시00분-02시59분', '03시00분-05시59분', '06시00분-08시59분', '09시00분-11시59분',
    '12시00분-14시59분', '15시00분-17시59분', '18시00분-20시59분', '21시00분-23시59분'
]

region_columns = [
    '서울', '부산', '대구', '인천', '광주', '대전', '울산', '세종', '경기 고양', '경기 과천', '경기 광명',
    '경기 광주', '경기 구리', '경기 군포', '경기 김포', '경기 남양주', '경기 동두천', '경기 부천',
    '경기 성남', '경기 수원', '경기 시흥', '경기 안산', '경기 안성', '경기 안양', '경기 양주', '경기 여주',
    '경기 오산', '경기 용인', '경기 의왕', '경기 의정부', '경기 이천', '경기 파주', '경기 평택', '경기 포천',
    '경기 하남', '경기 화성', '강원 강릉', '강원 동해', '강원 삼척', '강원 속초', '강원 원주', '강원 춘천',
    '강원 태백', '충북 제천', '충북 청주', '충북 충주', '충남 계룡', '충남 공주', '충남 논산', '충남 당진',
    '충남 보령', '충남 서산', '충남 아산', '충남 천안', '전북 군산', '전북 김제', '전북 남원', '전북 익산',
    '전북 전주', '전북 정읍', '전남 광양', '전남 나주', '전남 목포', '전남 순천', '전남 여수', '경북 경산',
    '경북 경주', '경북 구미', '경북 김천', '경북 문경', '경북 상주', '경북 안동', '경북 영주', '경북 영천',
    '경북 포항', '경남 거제', '경남 김해', '경남 밀양', '경남 사천', '경남 양산', '경남 진주', '경남 창원',
    '경남 통영', '제주 서귀포', '제주 제주', '기타도시', '도시이외'
]

time_df = pd.melt(
    merged_df,
    id_vars=['범죄대분류', '범죄중분류'] + region_columns,
    value_vars=time_columns,
    var_name='시간대',
    value_name='범죄발생건수'
)

time_df.head()

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

!apt-get -qq -y install fonts-nanum > /dev/null



fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 18, 'font.family': 'NanumGothic'}) # 폰트 설

category_time_data = time_df.groupby(['범죄대분류', '시간대'])['범죄발생건수'].sum().reset_index()
heatmap_data = category_time_data.pivot(index="범죄대분류", columns="시간대", values="범죄발생건수")

plt.figure(figsize=(20, 16))
sns.heatmap(heatmap_data, annot=True, fmt="d", cmap="YlGnBu")
plt.title("범죄대분류별 시간대별 발생 건수")
plt.xlabel("시간대")
plt.ylabel("범죄대분류")
plt.show()

category_time_data = time_df.groupby(['시간대', '범죄대분류'])['범죄발생건수'].sum().unstack()

# 스택형 바 차트 생성
category_time_data.plot(kind='bar', stacked=True, figsize=(14, 8))
plt.title("시간대별 범죄대분류 발생 건수")
plt.xlabel("시간대")
plt.ylabel("범죄 발생 건수")
plt.legend(title="범죄대분류", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

region_columns = [
    '서울', '부산', '대구', '인천', '광주', '대전', '울산', '세종', '경기 고양', '경기 과천', '경기 광명',
    '경기 광주', '경기 구리', '경기 군포', '경기 김포', '경기 남양주', '경기 동두천', '경기 부천',
    '경기 성남', '경기 수원', '경기 시흥', '경기 안산', '경기 안성', '경기 안양', '경기 양주', '경기 여주',
    '경기 오산', '경기 용인', '경기 의왕', '경기 의정부', '경기 이천', '경기 파주', '경기 평택', '경기 포천',
    '경기 하남', '경기 화성', '강원 강릉', '강원 동해', '강원 삼척', '강원 속초', '강원 원주', '강원 춘천',
    '강원 태백', '충북 제천', '충북 청주', '충북 충주', '충남 계룡', '충남 공주', '충남 논산', '충남 당진',
    '충남 보령', '충남 서산', '충남 아산', '충남 천안', '전북 군산', '전북 김제', '전북 남원', '전북 익산',
    '전북 전주', '전북 정읍', '전남 광양', '전남 나주', '전남 목포', '전남 순천', '전남 여수', '경북 경산',
    '경북 경주', '경북 구미', '경북 김천', '경북 문경', '경북 상주', '경북 안동', '경북 영주', '경북 영천',
    '경북 포항', '경남 거제', '경남 김해', '경남 밀양', '경남 사천', '경남 양산', '경남 진주', '경남 창원',
    '경남 통영', '제주 서귀포', '제주 제주', '기타도시', '도시이외'
]

region_data = time_df[region_columns].sum().sort_values(ascending=False)

plt.figure(figsize=(14, 8))
region_data.plot(kind='bar')
plt.title("지역별 범죄 발생 건수")
plt.xlabel("지역")
plt.ylabel("범죄 발생 건수")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

top_10_region_data = region_data.head(10)

plt.figure(figsize=(10, 6))
top_10_region_data.plot(kind='bar', color='skyblue')
plt.title("상위 10개 도시의 범죄 발생 건수")
plt.xlabel("도시")
plt.ylabel("범죄 발생 건수")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

df_population = pd.read_csv("/content/인구수.csv",encoding="utf-8")
print(df_population)


df_population.columns = ['도시명', '인구수']
# 쉼표 제거 및 숫자로 변환
df_population['인구수'] = df_population['인구수'].str.replace(',', '').astype(int)
# 정리된 데이터 확인
df_population.head()

import pandas as pd

# CSV 데이터 불러오기
df_population = pd.read_csv("/content/인구수.csv", encoding="utf-8")

# 컬럼명 수정
df_population.columns = ['도시명', '인구수']

# 쉼표 제거 및 숫자로 변환
df_population['인구수'] = df_population['인구수'].str.replace(',', '').astype(int)

# wide 형식으로 변환
df_population_wide = df_population.set_index('도시명').T

# 결과 확인
print(df_population_wide)

import pandas as pd
import matplotlib.pyplot as plt

# 상위 10개 도시 추출
top_10_cities = df_population_wide.loc['인구수'].sort_values(ascending=False).head(10)

# 막대그래프 그리기
plt.figure(figsize=(10, 6))
top_10_cities.plot(kind='bar')
plt.title('상위 10개 도시 인구수', fontsize=16)
plt.xlabel('도시명', fontsize=12)
plt.ylabel('인구수', fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# 그래프 출력
plt.show()

print(df_population_wide.columns)

import pandas as pd

# CSV 파일 읽기
df_loc = pd.read_csv("/content/경찰청_범죄 발생 지역별 통계_20221231.csv", encoding="cp949")

# '범죄대분류'와 '범죄중분류' 열 제거
df_cleaned = df_loc.drop(columns=['범죄대분류', '범죄중분류'])

# 각 행의 값을 합산하여 하나의 행으로 변환
df_summed = pd.DataFrame(df_cleaned.sum(axis=0)).T

# 결과 출력
print(df_summed.columns)

import pandas as pd

# 데이터프레임 읽기
df_loc = pd.read_csv("/content/경찰청_범죄 발생 지역별 통계_20221231.csv", encoding="cp949")

# 범죄 데이터 전처리
df_summed = df_loc.drop(columns=["범죄대분류", "범죄중분류"]).sum(axis=0).to_frame().T
df_summed.columns.name = None  # 컬럼 이름 인덱스 해제

# 도시 이름 리스트 추출
crime_cities = df_summed.columns
population_cities = df_population_wide.columns

# 도시 이름 매핑 생성
city_mapping = {}
for crime_city in crime_cities:
    for pop_city in population_cities:
        if crime_city in pop_city or pop_city in crime_city:
            city_mapping[crime_city] = pop_city
            break

# 매핑 결과를 데이터프레임에 반영
df_summed_renamed = df_summed.rename(columns=city_mapping)

# 공통 도시 추출 (set → list 변환)
common_cities = list(set(df_summed_renamed.columns).intersection(set(df_population_wide.columns)))

# 범죄 발생 건수와 인구수 비율 계산
crime_population_ratio = pd.DataFrame({
    "범죄 발생 건수": df_summed_renamed[common_cities].iloc[0],
    "인구수": df_population_wide.loc["인구수", common_cities]
})
crime_population_ratio["비율"] = crime_population_ratio["범죄 발생 건수"] / crime_population_ratio["인구수"]

# 결과 출력
print(crime_population_ratio)

import matplotlib.pyplot as plt

# 범죄 비율 데이터를 정렬
crime_population_ratio_sorted = crime_population_ratio.sort_values(by="비율", ascending=False)

# 그래프 그리기
plt.figure(figsize=(12, 6))
plt.bar(crime_population_ratio_sorted.index, crime_population_ratio_sorted["비율"], color="skyblue")
plt.title("도시별 범죄 발생 비율", fontsize=16)
plt.xlabel("도시", fontsize=12)
plt.ylabel("범죄 발생 건수 / 인구수", fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()

# 그래프 출력
plt.show()

